package com.cbry.math;

import java.util.Arrays;

/*
 * 
 * 一个数组中，只有数字 obj 出现了一次，其他数字都出现了两次。请查找出 obj，约束为 O(n) 的时间复杂度、O(1) 的空间复杂度。
 * 例如在数组 a = [2,1,4,3,4,2,3] 中，则输出 1。因为 2、3、4 都出现了两次，唯独 1 只出现一次。
 * 
 * 采用：异或运算:两个数转为二进制，然后从高位开始比较，如果相同则为0，不同则为1.
 * 异或运算。异或有这样两个性质：第一，任何数异或自己为零；第二，任何数异或零，是它自己。
 * 要实现这个效果`不`需要先对数组进行排序：结合律：a ^ b ^ c = a ^ （b ^ c） = （a ^ b） ^ c 。
 * `异或实现加法/减法法` ： 2 ^ 3 = 5  ,  5 ^ 3 = 2  ， 涉及进位就凉了
 * 半加器：进位的加法
 * 
 * 接着围绕题目来看，除了 obj 以外的元素都出现两次。突发奇想一下，如果可以有一个类似于“连连看”的计算，能把相同元素清掉，最终不就只保留了 obj 吗？“相同元素”清掉，这就是异或运算口诀中的“同零异一”，这就与异或的数学运算构建了联系。因此，学习数学时，死读书是没用的，必须落地到实践，做到知行合一。
 * */


public class Xor {
	public static void main(String[] args) {
		
		//不是加减法
		//System.out.println(92^13);  
		
		
		int[] a = { 2, 1, 4, 3, 4, 2, 3 };

		//Arrays.sort(a);
		int result = a[0];
		for (int i = 1; i < a.length; i++) {
			// System.out.println(a[i]);
			result = result ^ a[i];
		}
		System.out.println(result);
	}
}
